<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Quick_Start.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Quick_Start.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Thu Dec 19 17:41:08 2019
<BR><P>
<H3>Maximum Stack Usage =        152 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
HAL_UART_Isr &rArr; uart_thr_empty_isr &rArr; __aeabi_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NMI_Handler</a><BR>
 <LI><a href="#[5]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemManage_Handler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
 <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
 <LI><a href="#[a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">DebugMon_Handler</a><BR>
 <LI><a href="#[b]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">PendSV_Handler</a><BR>
 <LI><a href="#[c]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">SysTick_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[12]">ADCC0_IRQHandler</a> from intc.o(i.ADCC0_IRQHandler) referenced from startup_elf2.o(RESET)
 <LI><a href="#[13]">ADCC1_IRQHandler</a> from intc.o(i.ADCC1_IRQHandler) referenced from startup_elf2.o(RESET)
 <LI><a href="#[14]">ADCC2_IRQHandler</a> from intc.o(i.ADCC2_IRQHandler) referenced from startup_elf2.o(RESET)
 <LI><a href="#[15]">ADCC3_IRQHandler</a> from intc.o(i.ADCC3_IRQHandler) referenced from startup_elf2.o(RESET)
 <LI><a href="#[16]">ADCC4_IRQHandler</a> from intc.o(i.ADCC4_IRQHandler) referenced from startup_elf2.o(RESET)
 <LI><a href="#[17]">ADCC5_IRQHandler</a> from intc.o(i.ADCC5_IRQHandler) referenced from startup_elf2.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from startup_elf2.o(.text) referenced from startup_elf2.o(RESET)
 <LI><a href="#[10]">DMAC_IRQHandler</a> from intc.o(i.DMAC_IRQHandler) referenced from startup_elf2.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from startup_elf2.o(.text) referenced from startup_elf2.o(RESET)
 <LI><a href="#[e]">EXT_IRQHandler</a> from intc.o(i.EXT_IRQHandler) referenced from startup_elf2.o(RESET)
 <LI><a href="#[1d]">GPIO_IRQHandler</a> from intc.o(i.GPIO_IRQHandler) referenced from startup_elf2.o(RESET)
 <LI><a href="#[24]">HAL_UART_Isr</a> from uart.o(i.HAL_UART_Isr) referenced from uart_demo.o(i.UART_INIT)
 <LI><a href="#[5]">HardFault_Handler</a> from startup_elf2.o(.text) referenced from startup_elf2.o(RESET)
 <LI><a href="#[19]">I2C0_IRQHandler</a> from intc.o(i.I2C0_IRQHandler) referenced from startup_elf2.o(RESET)
 <LI><a href="#[1a]">I2C1_IRQHandler</a> from intc.o(i.I2C1_IRQHandler) referenced from startup_elf2.o(RESET)
 <LI><a href="#[1e]">I2S_IRQHandler</a> from intc.o(i.I2S_IRQHandler) referenced from startup_elf2.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from startup_elf2.o(.text) referenced from startup_elf2.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from startup_elf2.o(.text) referenced from startup_elf2.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from startup_elf2.o(.text) referenced from startup_elf2.o(RESET)
 <LI><a href="#[11]">QSPI_IRQHandler</a> from intc.o(i.QSPI_IRQHandler) referenced from startup_elf2.o(RESET)
 <LI><a href="#[f]">RTC_IRQHandler</a> from intc.o(i.RTC_IRQHandler) referenced from startup_elf2.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from startup_elf2.o(.text) referenced from startup_elf2.o(RESET)
 <LI><a href="#[1b]">SPIM_IRQHandler</a> from intc.o(i.SPIM_IRQHandler) referenced from startup_elf2.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from startup_elf2.o(.text) referenced from startup_elf2.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from startup_elf2.o(.text) referenced from startup_elf2.o(RESET)
 <LI><a href="#[1f]">SystemInit</a> from system_elf2.o(i.SystemInit) referenced from startup_elf2.o(.text)
 <LI><a href="#[18]">TIMER_IRQHandler</a> from intc.o(i.TIMER_IRQHandler) referenced from startup_elf2.o(RESET)
 <LI><a href="#[1c]">UART_IRQHandler</a> from intc.o(i.UART_IRQHandler) referenced from startup_elf2.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from startup_elf2.o(.text) referenced from startup_elf2.o(RESET)
 <LI><a href="#[d]">WDT_IRQHandler</a> from intc.o(i.WDT_IRQHandler) referenced from startup_elf2.o(RESET)
 <LI><a href="#[26]">__main</a> from __main.o(!!!main) referenced from startup_elf2.o(.text)
 <LI><a href="#[22]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[21]">fputc</a> from log.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[23]">timer_isr</a> from timer_demo.o(i.timer_isr) referenced from timer_demo.o(i.TIMER_INIT)
 <LI><a href="#[25]">uart_rx_finish</a> from uart_demo.o(i.uart_rx_finish) referenced from main.o(i.main)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[26]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[27]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[29]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[a6]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[a7]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[a8]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[a9]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[aa]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[2a]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[3c]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[2c]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[ab]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[31]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[ac]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[ad]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[ae]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[af]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[b0]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[b1]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[b2]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[b3]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[b4]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[b5]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[b6]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[b7]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[b8]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[b9]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[ba]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[bb]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[bc]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[bd]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[be]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[bf]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[c0]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[36]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[c1]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[c2]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[c3]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[c4]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[c5]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[c6]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[c7]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[28]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[c8]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[2e]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[30]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[c9]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[32]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; HAL_UART_Read &rArr; __aeabi_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[ca]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[4c]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[35]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[cb]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[37]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_elf2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_elf2.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_elf2.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_elf2.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_elf2.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_elf2.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_elf2.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_elf2.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_elf2.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_elf2.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_elf2.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_elf2.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_elf2.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_elf2.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_elf2.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_elf2.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_elf2.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_elf2.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_elf2.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_elf2.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_elf2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[39]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[3b]"></a>__printf</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[43]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[2b]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[3e]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_IRQHandler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAC_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCC5_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCC4_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCC3_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCC2_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCC1_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCC0_IRQHandler
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Int_Register
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_callback_register
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Int_Register
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_finish
</UL>

<P><STRONG><a name="[9b]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_finish
</UL>

<P><STRONG><a name="[40]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[cc]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[3d]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[42]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[44]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[2d]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[3a]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[3f]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[d0]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[d3]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[d5]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[45]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[46]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[48]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[47]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[2f]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[34]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[49]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[4d]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[d6]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[d7]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[12]"></a>ADCC0_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, intc.o(i.ADCC0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = ADCC0_IRQHandler &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_elf2.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>ADCC1_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, intc.o(i.ADCC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = ADCC1_IRQHandler &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_elf2.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>ADCC2_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, intc.o(i.ADCC2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = ADCC2_IRQHandler &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_elf2.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>ADCC3_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, intc.o(i.ADCC3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = ADCC3_IRQHandler &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_elf2.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>ADCC4_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, intc.o(i.ADCC4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = ADCC4_IRQHandler &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_elf2.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>ADCC5_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, intc.o(i.ADCC5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = ADCC5_IRQHandler &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_elf2.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>CH0_Deploy</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, pulse_demo.o(i.CH0_Deploy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CH0_Deploy
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHn_ORDER_SEND
</UL>

<P><STRONG><a name="[89]"></a>CH0_OPREA</STRONG> (Thumb, 232 bytes, Stack size 36 bytes, timer_demo.o(i.CH0_OPREA))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CH0_OPREA
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_isr
</UL>

<P><STRONG><a name="[52]"></a>CH1_Deploy</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, pulse_demo.o(i.CH1_Deploy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CH1_Deploy
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHn_ORDER_SEND
</UL>

<P><STRONG><a name="[8a]"></a>CH1_OPREA</STRONG> (Thumb, 232 bytes, Stack size 36 bytes, timer_demo.o(i.CH1_OPREA))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CH1_OPREA
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_isr
</UL>

<P><STRONG><a name="[53]"></a>CH2_Deploy</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, pulse_demo.o(i.CH2_Deploy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CH2_Deploy
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHn_ORDER_SEND
</UL>

<P><STRONG><a name="[8b]"></a>CH2_OPREA</STRONG> (Thumb, 230 bytes, Stack size 36 bytes, timer_demo.o(i.CH2_OPREA))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CH2_OPREA
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_isr
</UL>

<P><STRONG><a name="[54]"></a>CH3_Deploy</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, pulse_demo.o(i.CH3_Deploy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CH3_Deploy
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHn_ORDER_SEND
</UL>

<P><STRONG><a name="[8c]"></a>CH3_OPREA</STRONG> (Thumb, 230 bytes, Stack size 36 bytes, timer_demo.o(i.CH3_OPREA))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CH3_OPREA
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_isr
</UL>

<P><STRONG><a name="[55]"></a>CH4_Deploy</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, pulse_demo.o(i.CH4_Deploy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CH4_Deploy
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHn_ORDER_SEND
</UL>

<P><STRONG><a name="[8d]"></a>CH4_OPREA</STRONG> (Thumb, 230 bytes, Stack size 36 bytes, timer_demo.o(i.CH4_OPREA))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CH4_OPREA
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_isr
</UL>

<P><STRONG><a name="[56]"></a>CH5_Deploy</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, pulse_demo.o(i.CH5_Deploy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CH5_Deploy
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHn_ORDER_SEND
</UL>

<P><STRONG><a name="[8e]"></a>CH5_OPREA</STRONG> (Thumb, 234 bytes, Stack size 36 bytes, timer_demo.o(i.CH5_OPREA))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CH5_OPREA
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_isr
</UL>

<P><STRONG><a name="[57]"></a>CH6_Deploy</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, pulse_demo.o(i.CH6_Deploy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CH6_Deploy
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHn_ORDER_SEND
</UL>

<P><STRONG><a name="[8f]"></a>CH6_OPREA</STRONG> (Thumb, 234 bytes, Stack size 36 bytes, timer_demo.o(i.CH6_OPREA))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CH6_OPREA
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_isr
</UL>

<P><STRONG><a name="[58]"></a>CH7_Deploy</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, pulse_demo.o(i.CH7_Deploy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CH7_Deploy
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHn_ORDER_SEND
</UL>

<P><STRONG><a name="[90]"></a>CH7_OPREA</STRONG> (Thumb, 242 bytes, Stack size 36 bytes, timer_demo.o(i.CH7_OPREA))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CH7_OPREA
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_isr
</UL>

<P><STRONG><a name="[59]"></a>CH8_Deploy</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, pulse_demo.o(i.CH8_Deploy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CH8_Deploy
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHn_ORDER_SEND
</UL>

<P><STRONG><a name="[91]"></a>CH8_OPREA</STRONG> (Thumb, 238 bytes, Stack size 36 bytes, timer_demo.o(i.CH8_OPREA))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CH8_OPREA
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_isr
</UL>

<P><STRONG><a name="[5a]"></a>CH9_Deploy</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, pulse_demo.o(i.CH9_Deploy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CH9_Deploy
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHn_ORDER_SEND
</UL>

<P><STRONG><a name="[92]"></a>CH9_OPREA</STRONG> (Thumb, 238 bytes, Stack size 36 bytes, timer_demo.o(i.CH9_OPREA))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CH9_OPREA
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_isr
</UL>

<P><STRONG><a name="[5b]"></a>CHA_Deploy</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, pulse_demo.o(i.CHA_Deploy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CHA_Deploy
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHn_ORDER_SEND
</UL>

<P><STRONG><a name="[93]"></a>CHA_OPREA</STRONG> (Thumb, 232 bytes, Stack size 36 bytes, timer_demo.o(i.CHA_OPREA))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CHA_OPREA
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_isr
</UL>

<P><STRONG><a name="[5c]"></a>CHB_Deploy</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, pulse_demo.o(i.CHB_Deploy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CHB_Deploy
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHn_ORDER_SEND
</UL>

<P><STRONG><a name="[94]"></a>CHB_OPREA</STRONG> (Thumb, 232 bytes, Stack size 36 bytes, timer_demo.o(i.CHB_OPREA))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CHB_OPREA
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_isr
</UL>

<P><STRONG><a name="[5d]"></a>CHC_Deploy</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, pulse_demo.o(i.CHC_Deploy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CHC_Deploy
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHn_ORDER_SEND
</UL>

<P><STRONG><a name="[95]"></a>CHC_OPREA</STRONG> (Thumb, 232 bytes, Stack size 36 bytes, timer_demo.o(i.CHC_OPREA))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CHC_OPREA
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_isr
</UL>

<P><STRONG><a name="[5e]"></a>CHD_Deploy</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, pulse_demo.o(i.CHD_Deploy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CHD_Deploy
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHn_ORDER_SEND
</UL>

<P><STRONG><a name="[96]"></a>CHD_OPREA</STRONG> (Thumb, 228 bytes, Stack size 36 bytes, timer_demo.o(i.CHD_OPREA))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CHD_OPREA
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_isr
</UL>

<P><STRONG><a name="[5f]"></a>CHE_Deploy</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, pulse_demo.o(i.CHE_Deploy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CHE_Deploy
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHn_ORDER_SEND
</UL>

<P><STRONG><a name="[97]"></a>CHE_OPREA</STRONG> (Thumb, 210 bytes, Stack size 36 bytes, timer_demo.o(i.CHE_OPREA))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CHE_OPREA
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_isr
</UL>

<P><STRONG><a name="[60]"></a>CHF_Deploy</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, pulse_demo.o(i.CHF_Deploy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CHF_Deploy
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHn_ORDER_SEND
</UL>

<P><STRONG><a name="[98]"></a>CHF_OPREA</STRONG> (Thumb, 210 bytes, Stack size 36 bytes, timer_demo.o(i.CHF_OPREA))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CHF_OPREA
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_isr
</UL>

<P><STRONG><a name="[4e]"></a>CHn_Message_Send</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, pulse_demo.o(i.CHn_Message_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CHn_Message_Send &rArr; HAL_UART_Write_Polling &rArr; HAL_UART_WriteChar_Polling
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Write_Polling
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHn_ORDER_SEND
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[50]"></a>CHn_ORDER_SEND</STRONG> (Thumb, 454 bytes, Stack size 24 bytes, pulse_demo.o(i.CHn_ORDER_SEND))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CHn_ORDER_SEND &rArr; CHn_Message_Send &rArr; HAL_UART_Write_Polling &rArr; HAL_UART_WriteChar_Polling
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHn_Message_Send
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHF_Deploy
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHE_Deploy
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHD_Deploy
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHC_Deploy
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHB_Deploy
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHA_Deploy
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH9_Deploy
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH8_Deploy
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH7_Deploy
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH6_Deploy
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH5_Deploy
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH4_Deploy
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_Deploy
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH2_Deploy
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH1_Deploy
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH0_Deploy
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10]"></a>DMAC_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, intc.o(i.DMAC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = DMAC_IRQHandler &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_elf2.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>EXT_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, intc.o(i.EXT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = EXT_IRQHandler &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_elf2.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>GPIO_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, intc.o(i.GPIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = GPIO_IRQHandler &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_elf2.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>HAL_SYSCON_Function_IO_Set</STRONG> (Thumb, 436 bytes, Stack size 24 bytes, syscon.o(i.HAL_SYSCON_Function_IO_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSCON_Function_IO_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysc_cpu_func_en_set
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_INIT
</UL>

<P><STRONG><a name="[81]"></a>HAL_SYSCON_HCLK_Src_Sel</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, syscon.o(i.HAL_SYSCON_HCLK_Src_Sel))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[63]"></a>HAL_SYSCON_Set_HClk_Div</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, syscon.o(i.HAL_SYSCON_Set_HClk_Div))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = HAL_SYSCON_Set_HClk_Div &rArr; __aeabi_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysc_awo_div_update_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[66]"></a>HAL_SYSCON_Set_PClk0_Div</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, syscon.o(i.HAL_SYSCON_Set_PClk0_Div))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = HAL_SYSCON_Set_PClk0_Div &rArr; __aeabi_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[67]"></a>HAL_SYSCON_Set_PClk1_Div</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, syscon.o(i.HAL_SYSCON_Set_PClk1_Div))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = HAL_SYSCON_Set_PClk1_Div &rArr; __aeabi_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysc_awo_div_update_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[68]"></a>HAL_SYSCON_Set_RTC_Div</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, syscon.o(i.HAL_SYSCON_Set_RTC_Div))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = HAL_SYSCON_Set_RTC_Div &rArr; __aeabi_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysc_awo_rtc_div_para_m1_setf
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysc_awo_div_update_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[6b]"></a>HAL_TIMER_Enable</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, timer.o(i.HAL_TIMER_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_INIT
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMER_Init
</UL>

<P><STRONG><a name="[6a]"></a>HAL_TIMER_Init</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, timer.o(i.HAL_TIMER_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIMER_Init &rArr; sysc_cpu_div_update_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysc_cpu_div_update_pack
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMER_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_INIT
</UL>

<P><STRONG><a name="[99]"></a>HAL_TIMER_Int_Clr</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, timer.o(i.HAL_TIMER_Int_Clr))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_isr
</UL>

<P><STRONG><a name="[84]"></a>HAL_TIMER_Set_LoadCount</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, timer.o(i.HAL_TIMER_Set_LoadCount))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_INIT
</UL>

<P><STRONG><a name="[88]"></a>HAL_UART_FIFO_Control</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, uart.o(i.HAL_UART_FIFO_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_UART_FIFO_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_INIT
</UL>

<P><STRONG><a name="[6d]"></a>HAL_UART_Init</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_Set_BaudRate &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_pen_setf
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_eps_setf
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_afce_setf
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Set_BaudRate
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_INIT
</UL>

<P><STRONG><a name="[24]"></a>HAL_UART_Isr</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, uart.o(i.HAL_UART_Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = HAL_UART_Isr &rArr; uart_thr_empty_isr &rArr; __aeabi_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_thr_empty_isr
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rec_error_isr
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rec_data_avail_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_demo.o(i.UART_INIT)
</UL>
<P><STRONG><a name="[75]"></a>HAL_UART_Read</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, uart.o(i.HAL_UART_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = HAL_UART_Read &rArr; __aeabi_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_erbfi_setf
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7e]"></a>HAL_UART_WriteChar_Polling</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uart.o(i.HAL_UART_WriteChar_Polling))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_WriteChar_Polling
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_thr_set
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tfnf_getf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Write_Polling
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[4f]"></a>HAL_UART_Write_Polling</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, uart.o(i.HAL_UART_Write_Polling))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_UART_Write_Polling &rArr; HAL_UART_WriteChar_Polling
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_WriteChar_Polling
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHn_Message_Send
</UL>

<P><STRONG><a name="[19]"></a>I2C0_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, intc.o(i.I2C0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = I2C0_IRQHandler &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_elf2.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>I2C1_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, intc.o(i.I2C1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = I2C1_IRQHandler &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_elf2.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>I2S_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, intc.o(i.I2S_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = I2S_IRQHandler &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_elf2.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>QSPI_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, intc.o(i.QSPI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = QSPI_IRQHandler &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_elf2.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RTC_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, intc.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = RTC_IRQHandler &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_elf2.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SPIM_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, intc.o(i.SPIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = SPIM_IRQHandler &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_elf2.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SystemInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, system_elf2.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = SystemInit &rArr; HAL_SYSCON_Set_RTC_Div &rArr; __aeabi_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSCON_Set_RTC_Div
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSCON_Set_PClk1_Div
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSCON_Set_PClk0_Div
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSCON_Set_HClk_Div
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSCON_HCLK_Src_Sel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_elf2.o(.text)
</UL>
<P><STRONG><a name="[82]"></a>TIMER_INIT</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, timer_demo.o(i.TIMER_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = TIMER_INIT &rArr; TIMER_Int_Register &rArr; int_callback_register &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Int_Register
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMER_Set_LoadCount
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMER_Init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMER_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18]"></a>TIMER_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, intc.o(i.TIMER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = TIMER_IRQHandler &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_elf2.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>TIMER_Int_Register</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, int_register.o(i.TIMER_Int_Register))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = TIMER_Int_Register &rArr; int_callback_register &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_callback_register
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_INIT
</UL>

<P><STRONG><a name="[86]"></a>UART_INIT</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, uart_demo.o(i.UART_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = UART_INIT &rArr; HAL_UART_Init &rArr; HAL_UART_Set_BaudRate &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Int_Register
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_FIFO_Control
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSCON_Function_IO_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c]"></a>UART_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, intc.o(i.UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = UART_IRQHandler &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_elf2.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>UART_Int_Register</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, int_register.o(i.UART_Int_Register))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = UART_Int_Register &rArr; int_callback_register &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_callback_register
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_INIT
</UL>

<P><STRONG><a name="[d]"></a>WDT_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, intc.o(i.WDT_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_elf2.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>__aeabi_assert</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, debug.o(i.__aeabi_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __aeabi_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Read
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_thr_empty_isr
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rec_data_avail_isr
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSCON_Set_RTC_Div
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSCON_Set_PClk1_Div
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSCON_Set_PClk0_Div
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSCON_Set_HClk_Div
</UL>

<P><STRONG><a name="[21]"></a>fputc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, log.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc &rArr; HAL_UART_WriteChar_Polling
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_WriteChar_Polling
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[33]"></a>main</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = main &rArr; HAL_UART_Read &rArr; __aeabi_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_INIT
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_INIT
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Read
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHn_ORDER_SEND
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHn_Message_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[23]"></a>timer_isr</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, timer_demo.o(i.timer_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = timer_isr &rArr; CHF_OPREA
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMER_Int_Clr
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHF_OPREA
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHE_OPREA
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHD_OPREA
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHC_OPREA
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHB_OPREA
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHA_OPREA
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH9_OPREA
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH8_OPREA
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH7_OPREA
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH6_OPREA
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH5_OPREA
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH4_OPREA
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_OPREA
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH2_OPREA
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH1_OPREA
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH0_OPREA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_demo.o(i.TIMER_INIT)
</UL>
<P><STRONG><a name="[25]"></a>uart_rx_finish</STRONG> (Thumb, 348 bytes, Stack size 24 bytes, uart_demo.o(i.uart_rx_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = uart_rx_finish &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[7b]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Set_BaudRate
</UL>

<P><STRONG><a name="[9d]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Set_BaudRate
</UL>

<P><STRONG><a name="[a1]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[7c]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Set_BaudRate
</UL>

<P><STRONG><a name="[a2]"></a>_ffix</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Set_BaudRate
</UL>

<P><STRONG><a name="[d8]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[7a]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Set_BaudRate
</UL>

<P><STRONG><a name="[a3]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[a0]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[9f]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Set_BaudRate
</UL>

<P><STRONG><a name="[a4]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[85]"></a>int_callback_register</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, int_register.o(i.int_callback_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = int_callback_register &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Int_Register
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Int_Register
</UL>

<P><STRONG><a name="[6c]"></a>sysc_cpu_div_update_pack</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, timer.o(i.sysc_cpu_div_update_pack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sysc_cpu_div_update_pack
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMER_Init
</UL>

<P><STRONG><a name="[6e]"></a>HAL_UART_Set_BaudRate</STRONG> (Thumb, 138 bytes, Stack size 56 bytes, uart.o(i.HAL_UART_Set_BaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_UART_Set_BaudRate &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_dlab_setf
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[71]"></a>uart_afce_setf</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(i.uart_afce_setf))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[7d]"></a>uart_dlab_setf</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(i.uart_dlab_setf))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Set_BaudRate
</UL>

<P><STRONG><a name="[70]"></a>uart_eps_setf</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(i.uart_eps_setf))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[76]"></a>uart_erbfi_setf</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(i.uart_erbfi_setf))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Read
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rec_data_avail_isr
</UL>

<P><STRONG><a name="[9c]"></a>uart_etbei_setf</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(i.uart_etbei_setf))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_thr_empty_isr
</UL>

<P><STRONG><a name="[6f]"></a>uart_pen_setf</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(i.uart_pen_setf))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[9a]"></a>uart_rbr_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(i.uart_rbr_get))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rec_data_avail_isr
</UL>

<P><STRONG><a name="[73]"></a>uart_rec_data_avail_isr</STRONG> (Thumb, 270 bytes, Stack size 16 bytes, uart.o(i.uart_rec_data_avail_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = uart_rec_data_avail_isr &rArr; __aeabi_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_thr_set
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tfnf_getf
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rbr_get
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_erbfi_setf
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Isr
</UL>

<P><STRONG><a name="[72]"></a>uart_rec_error_isr</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, uart.o(i.uart_rec_error_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_rec_error_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Isr
</UL>

<P><STRONG><a name="[7f]"></a>uart_tfnf_getf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(i.uart_tfnf_getf))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_thr_empty_isr
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rec_data_avail_isr
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_WriteChar_Polling
</UL>

<P><STRONG><a name="[74]"></a>uart_thr_empty_isr</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, uart.o(i.uart_thr_empty_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = uart_thr_empty_isr &rArr; __aeabi_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_thr_set
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tfnf_getf
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_etbei_setf
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Isr
</UL>

<P><STRONG><a name="[80]"></a>uart_thr_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(i.uart_thr_set))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_thr_empty_isr
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rec_data_avail_isr
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_WriteChar_Polling
</UL>

<P><STRONG><a name="[65]"></a>sysc_awo_div_update_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, syscon.o(i.sysc_awo_div_update_set))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSCON_Set_RTC_Div
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSCON_Set_PClk1_Div
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSCON_Set_HClk_Div
</UL>

<P><STRONG><a name="[69]"></a>sysc_awo_rtc_div_para_m1_setf</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, syscon.o(i.sysc_awo_rtc_div_para_m1_setf))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSCON_Set_RTC_Div
</UL>

<P><STRONG><a name="[62]"></a>sysc_cpu_func_en_set</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, syscon.o(i.sysc_cpu_func_en_set))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSCON_Function_IO_Set
</UL>

<P><STRONG><a name="[a5]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[9e]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[22]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
